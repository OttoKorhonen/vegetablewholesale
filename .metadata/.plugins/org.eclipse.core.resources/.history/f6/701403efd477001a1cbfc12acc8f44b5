package hh.swd20.vegetablewholesale.web;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import hh.swd20.vegetablewholesale.domain.CategoryRepository;
import hh.swd20.vegetablewholesale.domain.Product;
import hh.swd20.vegetablewholesale.domain.ProductRepository;

@Controller
public class ProductController {
	
	//Model - vastuussa sovellusdatan ylläpidosta
	//View - vastuussa datan näyttämisestä käyttäjälle
	//Controller - käsittelee käyttäjän syöttämää tietoa (inputs) ja toimii yhdessä modelin kanssa
	
	@Autowired
	CategoryRepository categoryRepository;
	@Autowired
	ProductRepository productRepository;
	
	// login controller kirja-sovellukseen
		@RequestMapping(value = "/login")
		public String login() {
			return "login";
		}
		
		@RequestMapping(value = "/editproduct/{id}", method = RequestMethod.GET) // haetaan endpointia
		public String editProduct(@PathVariable("id") Long productId, Model model) {
			model.addAttribute("product", productRepository.findById(productId));// käytetään findById-metodia haettaessa
																	// bookrepositorystä tiettyä kirjaa Id-tunnuksella
			return "editbook"; // editbook.html palautus
		}

		// Tehdään RESTful metodi hakemaan kaikki tuotteet
		@RequestMapping(value = "/products", method = RequestMethod.GET)
		public @ResponseBody List<Product> productListRest() {
			return (List<Product>) productRepository.findAll();
		}

		// RESTful palvelu, jolla etsitään tuotteen id:n perusteella
		@RequestMapping(value = "/products/{id}", method = RequestMethod.GET)
		public @ResponseBody Optional<Product> findProductRest(@PathVariable("productId") Long productId) {
			return productRepository.findById(productId);
		}

		// listaa tuotteet
		@RequestMapping(value = "/productlist", method = RequestMethod.GET)
		public String getProducts(Model model) {
			List<Product> products = (List<Product>) productRepository.findAll();// haetaan tietokannasta tuotteet
			model.addAttribute("products", products); // välitetään tuotelista templatelle model-olion avulla
			return "productlist"; // DispatcherServlet saa tämän template-nimen ja kutsuu seuraavaksi
								// productlist.html-templatea
		} // joka prosessoidaan palvelimella

//		// tyhjän kirjalomakkeen muodostaminen, uuden kirjan luominen
//		@RequestMapping(value = "/newbook", method = RequestMethod.GET)
//		public String AddBookForm(Model model) {
//			model.addAttribute("book", new Book()); // "tyhjä" kirja-olio
//			model.addAttribute("categories", categoryRepository.findAll());// lisättiin haku categoryrepositorysta
//			return "bookform"; // bookform.html palautus
//		}

		// kirjalomakkeella syötettyjen tietojen vastaanotto ja tallennus
		@RequestMapping(value = "/save", method = RequestMethod.POST)
		public String saveProduct(@ModelAttribute Product product) {
			// talletetaan yhden tuotteen tiedot tietokantaan
			productRepository.save(product); // save osaa tehdä tarpeen mukaan SQL insertin tai updaten
			return "redirect:/productlist";// /booklist-endpointin kutsu
		}

		// kirjan poistamiseen käytetty metodi, jossa ainoastaan käyttäjä, jolle on annettu rooli ADMIN voi poistaa kirjan luettelosta
		@RequestMapping(value = "/deleteproduct/{id}", method = RequestMethod.GET)
		//@PreAuthorize("hasAuthority('ADMIN')")
		public String deleteProduct(@PathVariable("productId") Long productId, Model model) {
			productRepository.deleteById(productId);
			return "redirect:../productlist";
		}
}
